Input: [1, 5, 11, 5]

Output: true

Explanation: The array can be partitioned as [1, 5, 5] and [11].



class Solution:
    def canPartition(self, nums: List[int]) -> bool:
        sum_arr=sum(nums)
        if (sum_arr%2!=0): # if sum odd then return not Possible
            return False
        elif(sum_arr%2==0): # problem decreased to Knapsack Problem with 0/1 output
            return self.subset(nums,int(sum_arr/2))
    
    def subset(self,arr,w):
        n=len(arr)
        t=[[0 for i in range(w+1)] for j in range(n+1)] # create 2d Matrix ((cols) rows)
        for i in range(n+1):
            for j in range(w+1):
                if i==0 and j==0:
                    t[i][j]=0
                elif j==0: # condition where sum is null but array elemts is there..possible to make
                    t[i][j]=True
                elif i==0:
                    t[i][j]=False
                
            
            #subset problem where w is equal to sum(array)/2
        for i in range(1,n+1):
            for j in range(1,w+1):
                if arr[i-1]<=j:
                    t[i][j] = t[i - 1][j - arr[i - 1]] or t[i - 1][j]  
                else:
                    t[i][j]=t[i-1][j]
        return t[n][w]
        
        
