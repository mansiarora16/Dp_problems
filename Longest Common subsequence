Given two strings text1 and text2, return the length of their longest common subsequence.

A subsequence of a string is a new string generated from the original string with some characters(can be none) deleted without changing the relative order of the remaining characters. (eg, "ace" is a subsequence of "abcde" while "aec" is not). A common subsequence of two strings is a subsequence that is common to both strings.

 

If there is no common subsequence, return 0.

Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.

class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        m=len(text1)
        n=len(text2)
        if m==0 or n==0:
            return 0
        
        t=[[-1 for col in range(n+1)] for rows in range(m+1)] #2-d matrix
        
        for i in range(m+1):
            for j in range(n+1):
                if i==0 or j==0: choice dig having first row and first col as value 0
                    t[i][j]=0
                
                elif text1[i-1]==text2[j-1]:# start checking from last value if equal add 1 and move on 
                    t[i][j]=1+t[i-1][j-1]
                
                else: # doesnt match so either decrease one and move on other
                    t[i][j]=max(t[i-1][j],t[i][j-1])
                
        return t[m][n]
